<!DOCTYPE html>
<html>
<head>
  <title>Phaser Game</title>
    <script src="https://cdn.jsdelivr.net/npm/phaser@3.15.1/dist/phaser-arcade-physics.min.js"></script>
</head>
    <body>
        <script type="text/javascript">
            var config = {
                type: Phaser.AUTO,
                width: 800,
                height: 600,
                physics: {
                    default: 'arcade',
                    arcade: {
                        gravity: {y:300},
                        debug: false
                    }
                },
                scene: {
                    preload: preload,
                    create: create,
                    update: update
                }
            };
            
            var game = new Phaser.Game(config);
            var platforms;
            var player;
            var cursors;
            var stars;
            var score;
            var scoreText;
            var bombs;
            var healthText;
            var reset;
            var gameOver = false;

            function preload ()
            {
                this.load.image('sky', '../static/assets/sky.png');
                this.load.image('ground', '../static/assets/platform.png');
                this.load.image('star', '../static/assets/star.png');
                this.load.image('bomb', '../static/assets/bomb.png');
                this.load.image('heart', '../static/assets/heart.svg');
                this.load.spritesheet('dude', 
                    '../static/assets/dude.png',
                    { frameWidth: 32, frameHeight: 48 }
                );
            }
            
            function create() {
                this.add.image(400,300,'sky');
    
                reset = this.add.text(725, 16, 'Reset', {fill: 'black' , border: '1px solid black'});
                reset.setInteractive()
                .on('pointerdown', () => {
                    this.scene.restart();
                    this.physics.resume();
                });

                platforms = this.physics.add.staticGroup();
                platforms.create(400, 568, 'ground').setScale(2).refreshBody();
                platforms.create(600, 400, 'ground');
                platforms.create(50, 250, 'ground');
                platforms.create(750, 220, 'ground');
    
                player = this.physics.add.sprite(100, 450, 'dude');
                player.setBounce(0.2);
                player.setCollideWorldBounds(true);
                player.health = 100;
    
                score = 0;
                scoreText = this.add.text(16, 16, 'Score: ' + score, {fontSize:'32px', fill:'#000'});
    
                healthText = this.add.text(400, 16, "Health: " + player.health, {fontSize:'32px', fill:'#000'});
    
                bombs = this.physics.add.group();
                this.physics.add.collider(bombs, platforms);
                this.physics.add.overlap(player, bombs, hitBomb, null, this);
    
                this.anims.create({
                    key:'left',
                    frames: this.anims.generateFrameNumbers('dude', {start: 0, end: 3}),
                    frameRate: 10,
                    repeate: -1
                });
    
                this.anims.create({
                    key: 'turn',
                    frames: [ { key: 'dude', frame: 4 } ],
                    frameRate: 20
                });
                
                this.anims.create({
                    key: 'right',
                    frames: this.anims.generateFrameNumbers('dude', { start: 5, end: 8 }),
                    frameRate: 10,
                    repeat: -1
                });
    
                cursors = this.input.keyboard.createCursorKeys();
    
                stars = this.physics.add.group({
                    key: 'star',
                    repeat: 11,
                    setXY: {x:11, y:0, stepX:70}
                });
    
                stars.children.iterate(child => {
                    child.setBounceY(Phaser.Math.FloatBetween(0.4, 0.8));
                });
    
                this.physics.add.collider(player, platforms);
                this.physics.add.collider(stars, platforms);
                this.physics.add.overlap(player, stars, collectStar, null, this);
            }
    
            function update ()
            {
                if(gameOver)
                    return;
                if (cursors.left.isDown) {
                    player.setVelocityX(-160);
                    player.anims.play('left', true);
                }
                else if (cursors.right.isDown) {
                    player.setVelocityX(160);
                    player.anims.play('right', true);
                } else {
                    player.setVelocityX(0);
                    player.anims.play('turn');
                }
    
                if (cursors.up.isDown && player.body.touching.down) {
                    player.setVelocityY(-330);
                }
            }
    
            function collectStar(player, star) {
                star.disableBody(true, true);
                console.log(player._isTinted)
                score += 10;
                scoreText.setText("Score: " + score);
    
                if(stars.countActive(true) === 0) {
                    stars.children.iterate(child => {
                        child.enableBody(true, child.x, 0, true, true);
                    });
    
                    var x = (player.x < 400) ? Phaser.Math.Between(400, 800) : Phaser.Math.Between(0, 400);
                    var bomb = bombs.create(x, 16, 'bomb');
                    bomb.setBounce(1);
                    bomb.setCollideWorldBounds(true);
                    bomb.setVelocity(Phaser.Math.Between(-200, 200), 200);
                }
    
                if(player.health < 50){
                    player.health += 1;
                    console.log(player.health)
                    healthText.setText("Health: " + player.health);
                }
    
                if(player._isTinted == true)
                    player.clearTint();
            }
    
            function hitBomb(player, bomb) {
                player.setTint(0xff0000);
                player.health = player.health - 1;
                healthText.setText("Health: " + player.health);
    
                if(player.health === 0) {
                    this.physics.pause();
                    player.anims.play('turn');
                    healthText.setText("Game Over")
                    gameOver = true;
                }
            }
        
        </script>

    </body>
</html>